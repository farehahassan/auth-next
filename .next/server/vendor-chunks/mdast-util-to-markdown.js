"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-to-markdown";
exports.ids = ["vendor-chunks/mdast-util-to-markdown"];
exports.modules = {

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inlineCode: () => (/* binding */ inlineCode)\n/* harmony export */ });\n/* harmony import */ var _util_pattern_compile_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/pattern-compile.js */ \"(rsc)/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js\");\n/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */ \ninlineCode.peek = inlineCodePeek;\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */ function inlineCode(node, _, state) {\n    let value = node.value || \"\";\n    let sequence = \"`\";\n    let index = -1;\n    // If there is a single grave accent on its own in the code, use a fence of\n    // two.\n    // If there are two in a row, use one.\n    while(new RegExp(\"(^|[^`])\" + sequence + \"([^`]|$)\").test(value)){\n        sequence += \"`\";\n    }\n    // If this is not just spaces or eols (tabs don’t count), and either the\n    // first or last character are a space, eol, or tick, then pad with spaces.\n    if (/[^ \\r\\n]/.test(value) && (/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value) || /^`|`$/.test(value))) {\n        value = \" \" + value + \" \";\n    }\n    // We have a potential problem: certain characters after eols could result in\n    // blocks being seen.\n    // For example, if someone injected the string `'\\n# b'`, then that would\n    // result in an ATX heading.\n    // We can’t escape characters in `inlineCode`, but because eols are\n    // transformed to spaces when going from markdown to HTML anyway, we can swap\n    // them out.\n    while(++index < state.unsafe.length){\n        const pattern = state.unsafe[index];\n        const expression = (0,_util_pattern_compile_js__WEBPACK_IMPORTED_MODULE_0__.patternCompile)(pattern);\n        /** @type {RegExpExecArray | null} */ let match;\n        // Only look for `atBreak`s.\n        // Btw: note that `atBreak` patterns will always start the regex at LF or\n        // CR.\n        if (!pattern.atBreak) continue;\n        while(match = expression.exec(value)){\n            let position = match.index;\n            // Support CRLF (patterns only look for one of the characters).\n            if (value.charCodeAt(position) === 10 /* `\\n` */  && value.charCodeAt(position - 1) === 13 /* `\\r` */ ) {\n                position--;\n            }\n            value = value.slice(0, position) + \" \" + value.slice(match.index + 1);\n        }\n    }\n    return sequence + value + sequence;\n}\n/**\n * @returns {string}\n */ function inlineCodePeek() {\n    return \"`\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvaGFuZGxlL2lubGluZS1jb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUV3RDtBQUV6REMsV0FBV0MsSUFBSSxHQUFHQztBQUVsQjs7Ozs7Q0FLQyxHQUNNLFNBQVNGLFdBQVdHLElBQUksRUFBRUMsQ0FBQyxFQUFFQyxLQUFLO0lBQ3ZDLElBQUlDLFFBQVFILEtBQUtHLEtBQUssSUFBSTtJQUMxQixJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsUUFBUSxDQUFDO0lBRWIsMkVBQTJFO0lBQzNFLE9BQU87SUFDUCxzQ0FBc0M7SUFDdEMsTUFBTyxJQUFJQyxPQUFPLGFBQWFGLFdBQVcsWUFBWUcsSUFBSSxDQUFDSixPQUFRO1FBQ2pFQyxZQUFZO0lBQ2Q7SUFFQSx3RUFBd0U7SUFDeEUsMkVBQTJFO0lBQzNFLElBQ0UsV0FBV0csSUFBSSxDQUFDSixVQUNmLFlBQVlJLElBQUksQ0FBQ0osVUFBVSxXQUFXSSxJQUFJLENBQUNKLFVBQVcsUUFBUUksSUFBSSxDQUFDSixNQUFLLEdBQ3pFO1FBQ0FBLFFBQVEsTUFBTUEsUUFBUTtJQUN4QjtJQUVBLDZFQUE2RTtJQUM3RSxxQkFBcUI7SUFDckIseUVBQXlFO0lBQ3pFLDRCQUE0QjtJQUM1QixtRUFBbUU7SUFDbkUsNkVBQTZFO0lBQzdFLFlBQVk7SUFDWixNQUFPLEVBQUVFLFFBQVFILE1BQU1NLE1BQU0sQ0FBQ0MsTUFBTSxDQUFFO1FBQ3BDLE1BQU1DLFVBQVVSLE1BQU1NLE1BQU0sQ0FBQ0gsTUFBTTtRQUNuQyxNQUFNTSxhQUFhZix3RUFBY0EsQ0FBQ2M7UUFDbEMsbUNBQW1DLEdBQ25DLElBQUlFO1FBRUosNEJBQTRCO1FBQzVCLHlFQUF5RTtRQUN6RSxNQUFNO1FBQ04sSUFBSSxDQUFDRixRQUFRRyxPQUFPLEVBQUU7UUFFdEIsTUFBUUQsUUFBUUQsV0FBV0csSUFBSSxDQUFDWCxPQUFTO1lBQ3ZDLElBQUlZLFdBQVdILE1BQU1QLEtBQUs7WUFFMUIsK0RBQStEO1lBQy9ELElBQ0VGLE1BQU1hLFVBQVUsQ0FBQ0QsY0FBYyxHQUFHLFFBQVEsT0FDMUNaLE1BQU1hLFVBQVUsQ0FBQ0QsV0FBVyxPQUFPLEdBQUcsUUFBUSxLQUM5QztnQkFDQUE7WUFDRjtZQUVBWixRQUFRQSxNQUFNYyxLQUFLLENBQUMsR0FBR0YsWUFBWSxNQUFNWixNQUFNYyxLQUFLLENBQUNMLE1BQU1QLEtBQUssR0FBRztRQUNyRTtJQUNGO0lBRUEsT0FBT0QsV0FBV0QsUUFBUUM7QUFDNUI7QUFFQTs7Q0FFQyxHQUNELFNBQVNMO0lBQ1AsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHBsYXRlLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL2hhbmRsZS9pbmxpbmUtY29kZS5qcz9mMjhmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbmxpbmVDb2RlfSBJbmxpbmVDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlBhcmVudH0gUGFyZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7cGF0dGVybkNvbXBpbGV9IGZyb20gJy4uL3V0aWwvcGF0dGVybi1jb21waWxlLmpzJ1xuXG5pbmxpbmVDb2RlLnBlZWsgPSBpbmxpbmVDb2RlUGVla1xuXG4vKipcbiAqIEBwYXJhbSB7SW5saW5lQ29kZX0gbm9kZVxuICogQHBhcmFtIHtQYXJlbnQgfCB1bmRlZmluZWR9IF9cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5saW5lQ29kZShub2RlLCBfLCBzdGF0ZSkge1xuICBsZXQgdmFsdWUgPSBub2RlLnZhbHVlIHx8ICcnXG4gIGxldCBzZXF1ZW5jZSA9ICdgJ1xuICBsZXQgaW5kZXggPSAtMVxuXG4gIC8vIElmIHRoZXJlIGlzIGEgc2luZ2xlIGdyYXZlIGFjY2VudCBvbiBpdHMgb3duIGluIHRoZSBjb2RlLCB1c2UgYSBmZW5jZSBvZlxuICAvLyB0d28uXG4gIC8vIElmIHRoZXJlIGFyZSB0d28gaW4gYSByb3csIHVzZSBvbmUuXG4gIHdoaWxlIChuZXcgUmVnRXhwKCcoXnxbXmBdKScgKyBzZXF1ZW5jZSArICcoW15gXXwkKScpLnRlc3QodmFsdWUpKSB7XG4gICAgc2VxdWVuY2UgKz0gJ2AnXG4gIH1cblxuICAvLyBJZiB0aGlzIGlzIG5vdCBqdXN0IHNwYWNlcyBvciBlb2xzICh0YWJzIGRvbuKAmXQgY291bnQpLCBhbmQgZWl0aGVyIHRoZVxuICAvLyBmaXJzdCBvciBsYXN0IGNoYXJhY3RlciBhcmUgYSBzcGFjZSwgZW9sLCBvciB0aWNrLCB0aGVuIHBhZCB3aXRoIHNwYWNlcy5cbiAgaWYgKFxuICAgIC9bXiBcXHJcXG5dLy50ZXN0KHZhbHVlKSAmJlxuICAgICgoL15bIFxcclxcbl0vLnRlc3QodmFsdWUpICYmIC9bIFxcclxcbl0kLy50ZXN0KHZhbHVlKSkgfHwgL15gfGAkLy50ZXN0KHZhbHVlKSlcbiAgKSB7XG4gICAgdmFsdWUgPSAnICcgKyB2YWx1ZSArICcgJ1xuICB9XG5cbiAgLy8gV2UgaGF2ZSBhIHBvdGVudGlhbCBwcm9ibGVtOiBjZXJ0YWluIGNoYXJhY3RlcnMgYWZ0ZXIgZW9scyBjb3VsZCByZXN1bHQgaW5cbiAgLy8gYmxvY2tzIGJlaW5nIHNlZW4uXG4gIC8vIEZvciBleGFtcGxlLCBpZiBzb21lb25lIGluamVjdGVkIHRoZSBzdHJpbmcgYCdcXG4jIGInYCwgdGhlbiB0aGF0IHdvdWxkXG4gIC8vIHJlc3VsdCBpbiBhbiBBVFggaGVhZGluZy5cbiAgLy8gV2UgY2Fu4oCZdCBlc2NhcGUgY2hhcmFjdGVycyBpbiBgaW5saW5lQ29kZWAsIGJ1dCBiZWNhdXNlIGVvbHMgYXJlXG4gIC8vIHRyYW5zZm9ybWVkIHRvIHNwYWNlcyB3aGVuIGdvaW5nIGZyb20gbWFya2Rvd24gdG8gSFRNTCBhbnl3YXksIHdlIGNhbiBzd2FwXG4gIC8vIHRoZW0gb3V0LlxuICB3aGlsZSAoKytpbmRleCA8IHN0YXRlLnVuc2FmZS5sZW5ndGgpIHtcbiAgICBjb25zdCBwYXR0ZXJuID0gc3RhdGUudW5zYWZlW2luZGV4XVxuICAgIGNvbnN0IGV4cHJlc3Npb24gPSBwYXR0ZXJuQ29tcGlsZShwYXR0ZXJuKVxuICAgIC8qKiBAdHlwZSB7UmVnRXhwRXhlY0FycmF5IHwgbnVsbH0gKi9cbiAgICBsZXQgbWF0Y2hcblxuICAgIC8vIE9ubHkgbG9vayBmb3IgYGF0QnJlYWtgcy5cbiAgICAvLyBCdHc6IG5vdGUgdGhhdCBgYXRCcmVha2AgcGF0dGVybnMgd2lsbCBhbHdheXMgc3RhcnQgdGhlIHJlZ2V4IGF0IExGIG9yXG4gICAgLy8gQ1IuXG4gICAgaWYgKCFwYXR0ZXJuLmF0QnJlYWspIGNvbnRpbnVlXG5cbiAgICB3aGlsZSAoKG1hdGNoID0gZXhwcmVzc2lvbi5leGVjKHZhbHVlKSkpIHtcbiAgICAgIGxldCBwb3NpdGlvbiA9IG1hdGNoLmluZGV4XG5cbiAgICAgIC8vIFN1cHBvcnQgQ1JMRiAocGF0dGVybnMgb25seSBsb29rIGZvciBvbmUgb2YgdGhlIGNoYXJhY3RlcnMpLlxuICAgICAgaWYgKFxuICAgICAgICB2YWx1ZS5jaGFyQ29kZUF0KHBvc2l0aW9uKSA9PT0gMTAgLyogYFxcbmAgKi8gJiZcbiAgICAgICAgdmFsdWUuY2hhckNvZGVBdChwb3NpdGlvbiAtIDEpID09PSAxMyAvKiBgXFxyYCAqL1xuICAgICAgKSB7XG4gICAgICAgIHBvc2l0aW9uLS1cbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBwb3NpdGlvbikgKyAnICcgKyB2YWx1ZS5zbGljZShtYXRjaC5pbmRleCArIDEpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlcXVlbmNlICsgdmFsdWUgKyBzZXF1ZW5jZVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGlubGluZUNvZGVQZWVrKCkge1xuICByZXR1cm4gJ2AnXG59XG4iXSwibmFtZXMiOlsicGF0dGVybkNvbXBpbGUiLCJpbmxpbmVDb2RlIiwicGVlayIsImlubGluZUNvZGVQZWVrIiwibm9kZSIsIl8iLCJzdGF0ZSIsInZhbHVlIiwic2VxdWVuY2UiLCJpbmRleCIsIlJlZ0V4cCIsInRlc3QiLCJ1bnNhZmUiLCJsZW5ndGgiLCJwYXR0ZXJuIiwiZXhwcmVzc2lvbiIsIm1hdGNoIiwiYXRCcmVhayIsImV4ZWMiLCJwb3NpdGlvbiIsImNoYXJDb2RlQXQiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/handle/list-item.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listItem: () => (/* binding */ listItem)\n/* harmony export */ });\n/* harmony import */ var _util_check_bullet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/check-bullet.js */ \"(rsc)/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js\");\n/* harmony import */ var _util_check_list_item_indent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/check-list-item-indent.js */ \"(rsc)/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js\");\n/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */ \n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */ function listItem(node, parent, state, info) {\n    const listItemIndent = (0,_util_check_list_item_indent_js__WEBPACK_IMPORTED_MODULE_0__.checkListItemIndent)(state);\n    let bullet = state.bulletCurrent || (0,_util_check_bullet_js__WEBPACK_IMPORTED_MODULE_1__.checkBullet)(state);\n    // Add the marker value for ordered lists.\n    if (parent && parent.type === \"list\" && parent.ordered) {\n        bullet = (typeof parent.start === \"number\" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node)) + bullet;\n    }\n    let size = bullet.length + 1;\n    if (listItemIndent === \"tab\" || listItemIndent === \"mixed\" && (parent && parent.type === \"list\" && parent.spread || node.spread)) {\n        size = Math.ceil(size / 4) * 4;\n    }\n    const tracker = state.createTracker(info);\n    tracker.move(bullet + \" \".repeat(size - bullet.length));\n    tracker.shift(size);\n    const exit = state.enter(\"listItem\");\n    const value = state.indentLines(state.containerFlow(node, tracker.current()), map);\n    exit();\n    return value;\n    /** @type {Map} */ function map(line, index, blank) {\n        if (index) {\n            return (blank ? \"\" : \" \".repeat(size)) + line;\n        }\n        return (blank ? bullet : bullet + \" \".repeat(size - bullet.length)) + line;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvaGFuZGxlL2xpc3QtaXRlbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FFa0Q7QUFDa0I7QUFFckU7Ozs7OztDQU1DLEdBQ00sU0FBU0UsU0FBU0MsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsSUFBSTtJQUNoRCxNQUFNQyxpQkFBaUJOLG9GQUFtQkEsQ0FBQ0k7SUFDM0MsSUFBSUcsU0FBU0gsTUFBTUksYUFBYSxJQUFJVCxrRUFBV0EsQ0FBQ0s7SUFFaEQsMENBQTBDO0lBQzFDLElBQUlELFVBQVVBLE9BQU9NLElBQUksS0FBSyxVQUFVTixPQUFPTyxPQUFPLEVBQUU7UUFDdERILFNBQ0UsQ0FBQyxPQUFPSixPQUFPUSxLQUFLLEtBQUssWUFBWVIsT0FBT1EsS0FBSyxHQUFHLENBQUMsSUFDakRSLE9BQU9RLEtBQUssR0FDWixLQUNIUCxDQUFBQSxNQUFNUSxPQUFPLENBQUNDLG1CQUFtQixLQUFLLFFBQ25DLElBQ0FWLE9BQU9XLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDYixLQUFJLElBQ2hDSztJQUNKO0lBRUEsSUFBSVMsT0FBT1QsT0FBT1UsTUFBTSxHQUFHO0lBRTNCLElBQ0VYLG1CQUFtQixTQUNsQkEsbUJBQW1CLFdBQ2pCLFdBQVdILE9BQU9NLElBQUksS0FBSyxVQUFVTixPQUFPZSxNQUFNLElBQUtoQixLQUFLZ0IsTUFBTSxHQUNyRTtRQUNBRixPQUFPRyxLQUFLQyxJQUFJLENBQUNKLE9BQU8sS0FBSztJQUMvQjtJQUVBLE1BQU1LLFVBQVVqQixNQUFNa0IsYUFBYSxDQUFDakI7SUFDcENnQixRQUFRRSxJQUFJLENBQUNoQixTQUFTLElBQUlpQixNQUFNLENBQUNSLE9BQU9ULE9BQU9VLE1BQU07SUFDckRJLFFBQVFJLEtBQUssQ0FBQ1Q7SUFDZCxNQUFNVSxPQUFPdEIsTUFBTXVCLEtBQUssQ0FBQztJQUN6QixNQUFNQyxRQUFReEIsTUFBTXlCLFdBQVcsQ0FDN0J6QixNQUFNMEIsYUFBYSxDQUFDNUIsTUFBTW1CLFFBQVFVLE9BQU8sS0FDekNDO0lBRUZOO0lBRUEsT0FBT0U7SUFFUCxnQkFBZ0IsR0FDaEIsU0FBU0ksSUFBSUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLEtBQUs7UUFDN0IsSUFBSUQsT0FBTztZQUNULE9BQU8sQ0FBQ0MsUUFBUSxLQUFLLElBQUlYLE1BQU0sQ0FBQ1IsS0FBSSxJQUFLaUI7UUFDM0M7UUFFQSxPQUFPLENBQUNFLFFBQVE1QixTQUFTQSxTQUFTLElBQUlpQixNQUFNLENBQUNSLE9BQU9ULE9BQU9VLE1BQU0sS0FBS2dCO0lBQ3hFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0cGxhdGUvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvaGFuZGxlL2xpc3QtaXRlbS5qcz82OWE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaXN0SXRlbX0gTGlzdEl0ZW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuTWFwfSBNYXBcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUGFyZW50fSBQYXJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkluZm99IEluZm9cbiAqL1xuXG5pbXBvcnQge2NoZWNrQnVsbGV0fSBmcm9tICcuLi91dGlsL2NoZWNrLWJ1bGxldC5qcydcbmltcG9ydCB7Y2hlY2tMaXN0SXRlbUluZGVudH0gZnJvbSAnLi4vdXRpbC9jaGVjay1saXN0LWl0ZW0taW5kZW50LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7TGlzdEl0ZW19IG5vZGVcbiAqIEBwYXJhbSB7UGFyZW50IHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiBAcGFyYW0ge0luZm99IGluZm9cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0SXRlbShub2RlLCBwYXJlbnQsIHN0YXRlLCBpbmZvKSB7XG4gIGNvbnN0IGxpc3RJdGVtSW5kZW50ID0gY2hlY2tMaXN0SXRlbUluZGVudChzdGF0ZSlcbiAgbGV0IGJ1bGxldCA9IHN0YXRlLmJ1bGxldEN1cnJlbnQgfHwgY2hlY2tCdWxsZXQoc3RhdGUpXG5cbiAgLy8gQWRkIHRoZSBtYXJrZXIgdmFsdWUgZm9yIG9yZGVyZWQgbGlzdHMuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09ICdsaXN0JyAmJiBwYXJlbnQub3JkZXJlZCkge1xuICAgIGJ1bGxldCA9XG4gICAgICAodHlwZW9mIHBhcmVudC5zdGFydCA9PT0gJ251bWJlcicgJiYgcGFyZW50LnN0YXJ0ID4gLTFcbiAgICAgICAgPyBwYXJlbnQuc3RhcnRcbiAgICAgICAgOiAxKSArXG4gICAgICAoc3RhdGUub3B0aW9ucy5pbmNyZW1lbnRMaXN0TWFya2VyID09PSBmYWxzZVxuICAgICAgICA/IDBcbiAgICAgICAgOiBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKSkgK1xuICAgICAgYnVsbGV0XG4gIH1cblxuICBsZXQgc2l6ZSA9IGJ1bGxldC5sZW5ndGggKyAxXG5cbiAgaWYgKFxuICAgIGxpc3RJdGVtSW5kZW50ID09PSAndGFiJyB8fFxuICAgIChsaXN0SXRlbUluZGVudCA9PT0gJ21peGVkJyAmJlxuICAgICAgKChwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09ICdsaXN0JyAmJiBwYXJlbnQuc3ByZWFkKSB8fCBub2RlLnNwcmVhZCkpXG4gICkge1xuICAgIHNpemUgPSBNYXRoLmNlaWwoc2l6ZSAvIDQpICogNFxuICB9XG5cbiAgY29uc3QgdHJhY2tlciA9IHN0YXRlLmNyZWF0ZVRyYWNrZXIoaW5mbylcbiAgdHJhY2tlci5tb3ZlKGJ1bGxldCArICcgJy5yZXBlYXQoc2l6ZSAtIGJ1bGxldC5sZW5ndGgpKVxuICB0cmFja2VyLnNoaWZ0KHNpemUpXG4gIGNvbnN0IGV4aXQgPSBzdGF0ZS5lbnRlcignbGlzdEl0ZW0nKVxuICBjb25zdCB2YWx1ZSA9IHN0YXRlLmluZGVudExpbmVzKFxuICAgIHN0YXRlLmNvbnRhaW5lckZsb3cobm9kZSwgdHJhY2tlci5jdXJyZW50KCkpLFxuICAgIG1hcFxuICApXG4gIGV4aXQoKVxuXG4gIHJldHVybiB2YWx1ZVxuXG4gIC8qKiBAdHlwZSB7TWFwfSAqL1xuICBmdW5jdGlvbiBtYXAobGluZSwgaW5kZXgsIGJsYW5rKSB7XG4gICAgaWYgKGluZGV4KSB7XG4gICAgICByZXR1cm4gKGJsYW5rID8gJycgOiAnICcucmVwZWF0KHNpemUpKSArIGxpbmVcbiAgICB9XG5cbiAgICByZXR1cm4gKGJsYW5rID8gYnVsbGV0IDogYnVsbGV0ICsgJyAnLnJlcGVhdChzaXplIC0gYnVsbGV0Lmxlbmd0aCkpICsgbGluZVxuICB9XG59XG4iXSwibmFtZXMiOlsiY2hlY2tCdWxsZXQiLCJjaGVja0xpc3RJdGVtSW5kZW50IiwibGlzdEl0ZW0iLCJub2RlIiwicGFyZW50Iiwic3RhdGUiLCJpbmZvIiwibGlzdEl0ZW1JbmRlbnQiLCJidWxsZXQiLCJidWxsZXRDdXJyZW50IiwidHlwZSIsIm9yZGVyZWQiLCJzdGFydCIsIm9wdGlvbnMiLCJpbmNyZW1lbnRMaXN0TWFya2VyIiwiY2hpbGRyZW4iLCJpbmRleE9mIiwic2l6ZSIsImxlbmd0aCIsInNwcmVhZCIsIk1hdGgiLCJjZWlsIiwidHJhY2tlciIsImNyZWF0ZVRyYWNrZXIiLCJtb3ZlIiwicmVwZWF0Iiwic2hpZnQiLCJleGl0IiwiZW50ZXIiLCJ2YWx1ZSIsImluZGVudExpbmVzIiwiY29udGFpbmVyRmxvdyIsImN1cnJlbnQiLCJtYXAiLCJsaW5lIiwiaW5kZXgiLCJibGFuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/association.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/association.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   association: () => (/* binding */ association)\n/* harmony export */ });\n/* harmony import */ var micromark_util_decode_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-decode-string */ \"(rsc)/./node_modules/micromark-util-decode-string/dev/index.js\");\n/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */ \n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */ function association(node) {\n    if (node.label || !node.identifier) {\n        return node.label || \"\";\n    }\n    return (0,micromark_util_decode_string__WEBPACK_IMPORTED_MODULE_0__.decodeString)(node.identifier);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9hc3NvY2lhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBRXdEO0FBRXpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDLEdBQ00sU0FBU0MsWUFBWUMsSUFBSTtJQUM5QixJQUFJQSxLQUFLQyxLQUFLLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxFQUFFO1FBQ2xDLE9BQU9GLEtBQUtDLEtBQUssSUFBSTtJQUN2QjtJQUVBLE9BQU9ILDBFQUFZQSxDQUFDRSxLQUFLRSxVQUFVO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dHBsYXRlLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL3V0aWwvYXNzb2NpYXRpb24uanM/MGZkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXNzb2NpYXRpb25JZH0gQXNzb2NpYXRpb25JZFxuICovXG5cbmltcG9ydCB7ZGVjb2RlU3RyaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1kZWNvZGUtc3RyaW5nJ1xuXG4vKipcbiAqIEdldCBhbiBpZGVudGlmaWVyIGZyb20gYW4gYXNzb2NpYXRpb24gdG8gbWF0Y2ggaXQgdG8gb3RoZXJzLlxuICpcbiAqIEFzc29jaWF0aW9ucyBhcmUgbm9kZXMgdGhhdCBtYXRjaCB0byBzb21ldGhpbmcgZWxzZSB0aHJvdWdoIGFuIElEOlxuICogPGh0dHBzOi8vZ2l0aHViLmNvbS9zeW50YXgtdHJlZS9tZGFzdCNhc3NvY2lhdGlvbj4uXG4gKlxuICogVGhlIGBsYWJlbGAgb2YgYW4gYXNzb2NpYXRpb24gaXMgdGhlIHN0cmluZyB2YWx1ZTogY2hhcmFjdGVyIGVzY2FwZXMgYW5kXG4gKiByZWZlcmVuY2VzIHdvcmssIGFuZCBjYXNpbmcgaXMgaW50YWN0LlxuICogVGhlIGBpZGVudGlmaWVyYCBpcyB1c2VkIHRvIG1hdGNoIG9uZSBhc3NvY2lhdGlvbiB0byBhbm90aGVyOlxuICogY29udHJvdmVyc2lhbGx5LCBjaGFyYWN0ZXIgZXNjYXBlcyBhbmQgcmVmZXJlbmNlcyBkb27igJl0IHdvcmsgaW4gdGhpc1xuICogbWF0Y2hpbmc6IGAmY29weTtgIGRvZXMgbm90IG1hdGNoIGDCqWAsIGFuZCBgXFwrYCBkb2VzIG5vdCBtYXRjaCBgK2AuXG4gKlxuICogQnV0IGNhc2luZyBpcyBpZ25vcmVkIChhbmQgd2hpdGVzcGFjZSkgaXMgdHJpbW1lZCBhbmQgY29sbGFwc2VkOiBgIEFcXG5iYFxuICogbWF0Y2hlcyBgYSBiYC5cbiAqIFNvLCB3ZSBkbyBwcmVmZXIgdGhlIGxhYmVsIHdoZW4gZmlndXJpbmcgb3V0IGhvdyB3ZeKAmXJlIGdvaW5nIHRvIHNlcmlhbGl6ZTpcbiAqIGl0IGhhcyB3aGl0ZXNwYWNlLCBjYXNpbmcsIGFuZCB3ZSBjYW4gaWdub3JlIG1vc3QgdXNlbGVzcyBjaGFyYWN0ZXJcbiAqIGVzY2FwZXMgYW5kIGFsbCBjaGFyYWN0ZXIgcmVmZXJlbmNlcy5cbiAqXG4gKiBAdHlwZSB7QXNzb2NpYXRpb25JZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc29jaWF0aW9uKG5vZGUpIHtcbiAgaWYgKG5vZGUubGFiZWwgfHwgIW5vZGUuaWRlbnRpZmllcikge1xuICAgIHJldHVybiBub2RlLmxhYmVsIHx8ICcnXG4gIH1cblxuICByZXR1cm4gZGVjb2RlU3RyaW5nKG5vZGUuaWRlbnRpZmllcilcbn1cbiJdLCJuYW1lcyI6WyJkZWNvZGVTdHJpbmciLCJhc3NvY2lhdGlvbiIsIm5vZGUiLCJsYWJlbCIsImlkZW50aWZpZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/association.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBullet: () => (/* binding */ checkBullet)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */ /**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */ function checkBullet(state) {\n    const marker = state.options.bullet || \"*\";\n    if (marker !== \"*\" && marker !== \"+\" && marker !== \"-\") {\n        throw new Error(\"Cannot serialize items with `\" + marker + \"` for `options.bullet`, expected `*`, `+`, or `-`\");\n    }\n    return marker;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jaGVjay1idWxsZXQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUVEOzs7Q0FHQyxHQUNNLFNBQVNBLFlBQVlDLEtBQUs7SUFDL0IsTUFBTUMsU0FBU0QsTUFBTUUsT0FBTyxDQUFDQyxNQUFNLElBQUk7SUFFdkMsSUFBSUYsV0FBVyxPQUFPQSxXQUFXLE9BQU9BLFdBQVcsS0FBSztRQUN0RCxNQUFNLElBQUlHLE1BQ1Isa0NBQ0VILFNBQ0E7SUFFTjtJQUVBLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0cGxhdGUvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jaGVjay1idWxsZXQuanM/ZmFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLk9wdGlvbnN9IE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiBAcmV0dXJucyB7RXhjbHVkZTxPcHRpb25zWydidWxsZXQnXSwgbnVsbCB8IHVuZGVmaW5lZD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0J1bGxldChzdGF0ZSkge1xuICBjb25zdCBtYXJrZXIgPSBzdGF0ZS5vcHRpb25zLmJ1bGxldCB8fCAnKidcblxuICBpZiAobWFya2VyICE9PSAnKicgJiYgbWFya2VyICE9PSAnKycgJiYgbWFya2VyICE9PSAnLScpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ2Fubm90IHNlcmlhbGl6ZSBpdGVtcyB3aXRoIGAnICtcbiAgICAgICAgbWFya2VyICtcbiAgICAgICAgJ2AgZm9yIGBvcHRpb25zLmJ1bGxldGAsIGV4cGVjdGVkIGAqYCwgYCtgLCBvciBgLWAnXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIG1hcmtlclxufVxuIl0sIm5hbWVzIjpbImNoZWNrQnVsbGV0Iiwic3RhdGUiLCJtYXJrZXIiLCJvcHRpb25zIiwiYnVsbGV0IiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkListItemIndent: () => (/* binding */ checkListItemIndent)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */ /**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */ function checkListItemIndent(state) {\n    const style = state.options.listItemIndent || \"tab\";\n    // To do: remove in a major.\n    // @ts-expect-error: deprecated.\n    if (style === 1 || style === \"1\") {\n        return \"one\";\n    }\n    if (style !== \"tab\" && style !== \"one\" && style !== \"mixed\") {\n        throw new Error(\"Cannot serialize items with `\" + style + \"` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`\");\n    }\n    return style;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jaGVjay1saXN0LWl0ZW0taW5kZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FFRDs7O0NBR0MsR0FDTSxTQUFTQSxvQkFBb0JDLEtBQUs7SUFDdkMsTUFBTUMsUUFBUUQsTUFBTUUsT0FBTyxDQUFDQyxjQUFjLElBQUk7SUFFOUMsNEJBQTRCO0lBQzVCLGdDQUFnQztJQUNoQyxJQUFJRixVQUFVLEtBQUtBLFVBQVUsS0FBSztRQUNoQyxPQUFPO0lBQ1Q7SUFFQSxJQUFJQSxVQUFVLFNBQVNBLFVBQVUsU0FBU0EsVUFBVSxTQUFTO1FBQzNELE1BQU0sSUFBSUcsTUFDUixrQ0FDRUgsUUFDQTtJQUVOO0lBRUEsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRwbGF0ZS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2NoZWNrLWxpc3QtaXRlbS1pbmRlbnQuanM/NDNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLk9wdGlvbnN9IE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiBAcmV0dXJucyB7RXhjbHVkZTxPcHRpb25zWydsaXN0SXRlbUluZGVudCddLCBudWxsIHwgdW5kZWZpbmVkPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTGlzdEl0ZW1JbmRlbnQoc3RhdGUpIHtcbiAgY29uc3Qgc3R5bGUgPSBzdGF0ZS5vcHRpb25zLmxpc3RJdGVtSW5kZW50IHx8ICd0YWInXG5cbiAgLy8gVG8gZG86IHJlbW92ZSBpbiBhIG1ham9yLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBkZXByZWNhdGVkLlxuICBpZiAoc3R5bGUgPT09IDEgfHwgc3R5bGUgPT09ICcxJykge1xuICAgIHJldHVybiAnb25lJ1xuICB9XG5cbiAgaWYgKHN0eWxlICE9PSAndGFiJyAmJiBzdHlsZSAhPT0gJ29uZScgJiYgc3R5bGUgIT09ICdtaXhlZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ2Fubm90IHNlcmlhbGl6ZSBpdGVtcyB3aXRoIGAnICtcbiAgICAgICAgc3R5bGUgK1xuICAgICAgICAnYCBmb3IgYG9wdGlvbnMubGlzdEl0ZW1JbmRlbnRgLCBleHBlY3RlZCBgdGFiYCwgYG9uZWAsIG9yIGBtaXhlZGAnXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlXG59XG4iXSwibmFtZXMiOlsiY2hlY2tMaXN0SXRlbUluZGVudCIsInN0YXRlIiwic3R5bGUiLCJvcHRpb25zIiwibGlzdEl0ZW1JbmRlbnQiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/container-flow.js":
/*!************************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/container-flow.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   containerFlow: () => (/* binding */ containerFlow)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */ /**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */ function containerFlow(parent, state, info) {\n    const indexStack = state.indexStack;\n    const children = parent.children || [];\n    const tracker = state.createTracker(info);\n    /** @type {Array<string>} */ const results = [];\n    let index = -1;\n    indexStack.push(-1);\n    while(++index < children.length){\n        const child = children[index];\n        indexStack[indexStack.length - 1] = index;\n        results.push(tracker.move(state.handle(child, parent, state, {\n            before: \"\\n\",\n            after: \"\\n\",\n            ...tracker.current()\n        })));\n        if (child.type !== \"list\") {\n            state.bulletLastUsed = undefined;\n        }\n        if (index < children.length - 1) {\n            results.push(tracker.move(between(child, children[index + 1], parent, state)));\n        }\n    }\n    indexStack.pop();\n    return results.join(\"\");\n}\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */ function between(left, right, parent, state) {\n    let index = state.join.length;\n    while(index--){\n        const result = state.join[index](left, right, parent, state);\n        if (result === true || result === 1) {\n            break;\n        }\n        if (typeof result === \"number\") {\n            return \"\\n\".repeat(1 + result);\n        }\n        if (result === false) {\n            return \"\\n\\n<!---->\\n\\n\";\n        }\n    }\n    return \"\\n\\n\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jb250YWluZXItZmxvdy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBRUQ7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0EsY0FBY0MsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLElBQUk7SUFDL0MsTUFBTUMsYUFBYUYsTUFBTUUsVUFBVTtJQUNuQyxNQUFNQyxXQUFXSixPQUFPSSxRQUFRLElBQUksRUFBRTtJQUN0QyxNQUFNQyxVQUFVSixNQUFNSyxhQUFhLENBQUNKO0lBQ3BDLDBCQUEwQixHQUMxQixNQUFNSyxVQUFVLEVBQUU7SUFDbEIsSUFBSUMsUUFBUSxDQUFDO0lBRWJMLFdBQVdNLElBQUksQ0FBQyxDQUFDO0lBRWpCLE1BQU8sRUFBRUQsUUFBUUosU0FBU00sTUFBTSxDQUFFO1FBQ2hDLE1BQU1DLFFBQVFQLFFBQVEsQ0FBQ0ksTUFBTTtRQUU3QkwsVUFBVSxDQUFDQSxXQUFXTyxNQUFNLEdBQUcsRUFBRSxHQUFHRjtRQUVwQ0QsUUFBUUUsSUFBSSxDQUNWSixRQUFRTyxJQUFJLENBQ1ZYLE1BQU1ZLE1BQU0sQ0FBQ0YsT0FBT1gsUUFBUUMsT0FBTztZQUNqQ2EsUUFBUTtZQUNSQyxPQUFPO1lBQ1AsR0FBR1YsUUFBUVcsT0FBTyxFQUFFO1FBQ3RCO1FBSUosSUFBSUwsTUFBTU0sSUFBSSxLQUFLLFFBQVE7WUFDekJoQixNQUFNaUIsY0FBYyxHQUFHQztRQUN6QjtRQUVBLElBQUlYLFFBQVFKLFNBQVNNLE1BQU0sR0FBRyxHQUFHO1lBQy9CSCxRQUFRRSxJQUFJLENBQ1ZKLFFBQVFPLElBQUksQ0FBQ1EsUUFBUVQsT0FBT1AsUUFBUSxDQUFDSSxRQUFRLEVBQUUsRUFBRVIsUUFBUUM7UUFFN0Q7SUFDRjtJQUVBRSxXQUFXa0IsR0FBRztJQUVkLE9BQU9kLFFBQVFlLElBQUksQ0FBQztBQUN0QjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNGLFFBQVFHLElBQUksRUFBRUMsS0FBSyxFQUFFeEIsTUFBTSxFQUFFQyxLQUFLO0lBQ3pDLElBQUlPLFFBQVFQLE1BQU1xQixJQUFJLENBQUNaLE1BQU07SUFFN0IsTUFBT0YsUUFBUztRQUNkLE1BQU1pQixTQUFTeEIsTUFBTXFCLElBQUksQ0FBQ2QsTUFBTSxDQUFDZSxNQUFNQyxPQUFPeEIsUUFBUUM7UUFFdEQsSUFBSXdCLFdBQVcsUUFBUUEsV0FBVyxHQUFHO1lBQ25DO1FBQ0Y7UUFFQSxJQUFJLE9BQU9BLFdBQVcsVUFBVTtZQUM5QixPQUFPLEtBQUtDLE1BQU0sQ0FBQyxJQUFJRDtRQUN6QjtRQUVBLElBQUlBLFdBQVcsT0FBTztZQUNwQixPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRwbGF0ZS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2NvbnRhaW5lci1mbG93LmpzPzBhOGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkZsb3dDb250ZW50fSBGbG93Q29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlBhcmVudH0gUGFyZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5UcmFja0ZpZWxkc30gVHJhY2tGaWVsZHNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7UGFyZW50ICYge2NoaWxkcmVuOiBBcnJheTxGbG93Q29udGVudD59fSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGZsb3cgbm9kZXMuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0ge1RyYWNrRmllbGRzfSBpbmZvXG4gKiAgIEluZm8gb24gd2hlcmUgd2UgYXJlIGluIHRoZSBkb2N1bWVudCB3ZSBhcmUgZ2VuZXJhdGluZy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNlcmlhbGl6ZWQgY2hpbGRyZW4sIGpvaW5lZCBieSAoYmxhbmspIGxpbmVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbmVyRmxvdyhwYXJlbnQsIHN0YXRlLCBpbmZvKSB7XG4gIGNvbnN0IGluZGV4U3RhY2sgPSBzdGF0ZS5pbmRleFN0YWNrXG4gIGNvbnN0IGNoaWxkcmVuID0gcGFyZW50LmNoaWxkcmVuIHx8IFtdXG4gIGNvbnN0IHRyYWNrZXIgPSBzdGF0ZS5jcmVhdGVUcmFja2VyKGluZm8pXG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0cyA9IFtdXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgaW5kZXhTdGFjay5wdXNoKC0xKVxuXG4gIHdoaWxlICgrK2luZGV4IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpbmRleF1cblxuICAgIGluZGV4U3RhY2tbaW5kZXhTdGFjay5sZW5ndGggLSAxXSA9IGluZGV4XG5cbiAgICByZXN1bHRzLnB1c2goXG4gICAgICB0cmFja2VyLm1vdmUoXG4gICAgICAgIHN0YXRlLmhhbmRsZShjaGlsZCwgcGFyZW50LCBzdGF0ZSwge1xuICAgICAgICAgIGJlZm9yZTogJ1xcbicsXG4gICAgICAgICAgYWZ0ZXI6ICdcXG4nLFxuICAgICAgICAgIC4uLnRyYWNrZXIuY3VycmVudCgpXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKVxuXG4gICAgaWYgKGNoaWxkLnR5cGUgIT09ICdsaXN0Jykge1xuICAgICAgc3RhdGUuYnVsbGV0TGFzdFVzZWQgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCBjaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICByZXN1bHRzLnB1c2goXG4gICAgICAgIHRyYWNrZXIubW92ZShiZXR3ZWVuKGNoaWxkLCBjaGlsZHJlbltpbmRleCArIDFdLCBwYXJlbnQsIHN0YXRlKSlcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBpbmRleFN0YWNrLnBvcCgpXG5cbiAgcmV0dXJuIHJlc3VsdHMuam9pbignJylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGxlZnRcbiAqIEBwYXJhbSB7Tm9kZX0gcmlnaHRcbiAqIEBwYXJhbSB7UGFyZW50fSBwYXJlbnRcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBiZXR3ZWVuKGxlZnQsIHJpZ2h0LCBwYXJlbnQsIHN0YXRlKSB7XG4gIGxldCBpbmRleCA9IHN0YXRlLmpvaW4ubGVuZ3RoXG5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBjb25zdCByZXN1bHQgPSBzdGF0ZS5qb2luW2luZGV4XShsZWZ0LCByaWdodCwgcGFyZW50LCBzdGF0ZSlcblxuICAgIGlmIChyZXN1bHQgPT09IHRydWUgfHwgcmVzdWx0ID09PSAxKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuICdcXG4nLnJlcGVhdCgxICsgcmVzdWx0KVxuICAgIH1cblxuICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gJ1xcblxcbjwhLS0tLT5cXG5cXG4nXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICdcXG5cXG4nXG59XG4iXSwibmFtZXMiOlsiY29udGFpbmVyRmxvdyIsInBhcmVudCIsInN0YXRlIiwiaW5mbyIsImluZGV4U3RhY2siLCJjaGlsZHJlbiIsInRyYWNrZXIiLCJjcmVhdGVUcmFja2VyIiwicmVzdWx0cyIsImluZGV4IiwicHVzaCIsImxlbmd0aCIsImNoaWxkIiwibW92ZSIsImhhbmRsZSIsImJlZm9yZSIsImFmdGVyIiwiY3VycmVudCIsInR5cGUiLCJidWxsZXRMYXN0VXNlZCIsInVuZGVmaW5lZCIsImJldHdlZW4iLCJwb3AiLCJqb2luIiwibGVmdCIsInJpZ2h0IiwicmVzdWx0IiwicmVwZWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/container-flow.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   containerPhrasing: () => (/* binding */ containerPhrasing)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */ /**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */ function containerPhrasing(parent, state, info) {\n    const indexStack = state.indexStack;\n    const children = parent.children || [];\n    /** @type {Array<string>} */ const results = [];\n    let index = -1;\n    let before = info.before;\n    indexStack.push(-1);\n    let tracker = state.createTracker(info);\n    while(++index < children.length){\n        const child = children[index];\n        /** @type {string} */ let after;\n        indexStack[indexStack.length - 1] = index;\n        if (index + 1 < children.length) {\n            /** @type {Handle} */ // @ts-expect-error: hush, it’s actually a `zwitch`.\n            let handle = state.handle.handlers[children[index + 1].type];\n            /** @type {Handle} */ // @ts-expect-error: hush, it’s actually a `zwitch`.\n            if (handle && handle.peek) handle = handle.peek;\n            after = handle ? handle(children[index + 1], parent, state, {\n                before: \"\",\n                after: \"\",\n                ...tracker.current()\n            }).charAt(0) : \"\";\n        } else {\n            after = info.after;\n        }\n        // In some cases, html (text) can be found in phrasing right after an eol.\n        // When we’d serialize that, in most cases that would be seen as html\n        // (flow).\n        // As we can’t escape or so to prevent it from happening, we take a somewhat\n        // reasonable approach: replace that eol with a space.\n        // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n        if (results.length > 0 && (before === \"\\r\" || before === \"\\n\") && child.type === \"html\") {\n            results[results.length - 1] = results[results.length - 1].replace(/(\\r?\\n|\\r)$/, \" \");\n            before = \" \";\n            // To do: does this work to reset tracker?\n            tracker = state.createTracker(info);\n            tracker.move(results.join(\"\"));\n        }\n        results.push(tracker.move(state.handle(child, parent, state, {\n            ...tracker.current(),\n            before,\n            after\n        })));\n        before = results[results.length - 1].slice(-1);\n    }\n    indexStack.pop();\n    return results.join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jb250YWluZXItcGhyYXNpbmcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQyxHQUVEOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDTSxTQUFTQSxrQkFBa0JDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxJQUFJO0lBQ25ELE1BQU1DLGFBQWFGLE1BQU1FLFVBQVU7SUFDbkMsTUFBTUMsV0FBV0osT0FBT0ksUUFBUSxJQUFJLEVBQUU7SUFDdEMsMEJBQTBCLEdBQzFCLE1BQU1DLFVBQVUsRUFBRTtJQUNsQixJQUFJQyxRQUFRLENBQUM7SUFDYixJQUFJQyxTQUFTTCxLQUFLSyxNQUFNO0lBRXhCSixXQUFXSyxJQUFJLENBQUMsQ0FBQztJQUNqQixJQUFJQyxVQUFVUixNQUFNUyxhQUFhLENBQUNSO0lBRWxDLE1BQU8sRUFBRUksUUFBUUYsU0FBU08sTUFBTSxDQUFFO1FBQ2hDLE1BQU1DLFFBQVFSLFFBQVEsQ0FBQ0UsTUFBTTtRQUM3QixtQkFBbUIsR0FDbkIsSUFBSU87UUFFSlYsVUFBVSxDQUFDQSxXQUFXUSxNQUFNLEdBQUcsRUFBRSxHQUFHTDtRQUVwQyxJQUFJQSxRQUFRLElBQUlGLFNBQVNPLE1BQU0sRUFBRTtZQUMvQixtQkFBbUIsR0FDbkIsb0RBQW9EO1lBQ3BELElBQUlHLFNBQVNiLE1BQU1hLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDWCxRQUFRLENBQUNFLFFBQVEsRUFBRSxDQUFDVSxJQUFJLENBQUM7WUFDNUQsbUJBQW1CLEdBQ25CLG9EQUFvRDtZQUNwRCxJQUFJRixVQUFVQSxPQUFPRyxJQUFJLEVBQUVILFNBQVNBLE9BQU9HLElBQUk7WUFDL0NKLFFBQVFDLFNBQ0pBLE9BQU9WLFFBQVEsQ0FBQ0UsUUFBUSxFQUFFLEVBQUVOLFFBQVFDLE9BQU87Z0JBQ3pDTSxRQUFRO2dCQUNSTSxPQUFPO2dCQUNQLEdBQUdKLFFBQVFTLE9BQU8sRUFBRTtZQUN0QixHQUFHQyxNQUFNLENBQUMsS0FDVjtRQUNOLE9BQU87WUFDTE4sUUFBUVgsS0FBS1csS0FBSztRQUNwQjtRQUVBLDBFQUEwRTtRQUMxRSxxRUFBcUU7UUFDckUsVUFBVTtRQUNWLDRFQUE0RTtRQUM1RSxzREFBc0Q7UUFDdEQseUVBQXlFO1FBQ3pFLElBQ0VSLFFBQVFNLE1BQU0sR0FBRyxLQUNoQkosQ0FBQUEsV0FBVyxRQUFRQSxXQUFXLElBQUcsS0FDbENLLE1BQU1JLElBQUksS0FBSyxRQUNmO1lBQ0FYLE9BQU8sQ0FBQ0EsUUFBUU0sTUFBTSxHQUFHLEVBQUUsR0FBR04sT0FBTyxDQUFDQSxRQUFRTSxNQUFNLEdBQUcsRUFBRSxDQUFDUyxPQUFPLENBQy9ELGVBQ0E7WUFFRmIsU0FBUztZQUVULDBDQUEwQztZQUMxQ0UsVUFBVVIsTUFBTVMsYUFBYSxDQUFDUjtZQUM5Qk8sUUFBUVksSUFBSSxDQUFDaEIsUUFBUWlCLElBQUksQ0FBQztRQUM1QjtRQUVBakIsUUFBUUcsSUFBSSxDQUNWQyxRQUFRWSxJQUFJLENBQ1ZwQixNQUFNYSxNQUFNLENBQUNGLE9BQU9aLFFBQVFDLE9BQU87WUFDakMsR0FBR1EsUUFBUVMsT0FBTyxFQUFFO1lBQ3BCWDtZQUNBTTtRQUNGO1FBSUpOLFNBQVNGLE9BQU8sQ0FBQ0EsUUFBUU0sTUFBTSxHQUFHLEVBQUUsQ0FBQ1ksS0FBSyxDQUFDLENBQUM7SUFDOUM7SUFFQXBCLFdBQVdxQixHQUFHO0lBRWQsT0FBT25CLFFBQVFpQixJQUFJLENBQUM7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0cGxhdGUvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jb250YWluZXItcGhyYXNpbmcuanM/NDlhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuSGFuZGxlfSBIYW5kbGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuSW5mb30gSW5mb1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5QYXJlbnR9IFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5QaHJhc2luZ0NvbnRlbnR9IFBocmFzaW5nQ29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgY2hpbGRyZW4gb2YgYSBwYXJlbnQgdGhhdCBjb250YWlucyBwaHJhc2luZyBjaGlsZHJlbi5cbiAqXG4gKiBUaGVzZSBjaGlsZHJlbiB3aWxsIGJlIGpvaW5lZCBmbHVzaCB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge1BhcmVudCAmIHtjaGlsZHJlbjogQXJyYXk8UGhyYXNpbmdDb250ZW50Pn19IHBhcmVudFxuICogICBQYXJlbnQgb2YgZmxvdyBub2Rlcy5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZCBhYm91dCB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIEBwYXJhbSB7SW5mb30gaW5mb1xuICogICBJbmZvIG9uIHdoZXJlIHdlIGFyZSBpbiB0aGUgZG9jdW1lbnQgd2UgYXJlIGdlbmVyYXRpbmcuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTZXJpYWxpemVkIGNoaWxkcmVuLCBqb2luZWQgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluZXJQaHJhc2luZyhwYXJlbnQsIHN0YXRlLCBpbmZvKSB7XG4gIGNvbnN0IGluZGV4U3RhY2sgPSBzdGF0ZS5pbmRleFN0YWNrXG4gIGNvbnN0IGNoaWxkcmVuID0gcGFyZW50LmNoaWxkcmVuIHx8IFtdXG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0cyA9IFtdXG4gIGxldCBpbmRleCA9IC0xXG4gIGxldCBiZWZvcmUgPSBpbmZvLmJlZm9yZVxuXG4gIGluZGV4U3RhY2sucHVzaCgtMSlcbiAgbGV0IHRyYWNrZXIgPSBzdGF0ZS5jcmVhdGVUcmFja2VyKGluZm8pXG5cbiAgd2hpbGUgKCsraW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2luZGV4XVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCBhZnRlclxuXG4gICAgaW5kZXhTdGFja1tpbmRleFN0YWNrLmxlbmd0aCAtIDFdID0gaW5kZXhcblxuICAgIGlmIChpbmRleCArIDEgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaHVzaCwgaXTigJlzIGFjdHVhbGx5IGEgYHp3aXRjaGAuXG4gICAgICBsZXQgaGFuZGxlID0gc3RhdGUuaGFuZGxlLmhhbmRsZXJzW2NoaWxkcmVuW2luZGV4ICsgMV0udHlwZV1cbiAgICAgIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaHVzaCwgaXTigJlzIGFjdHVhbGx5IGEgYHp3aXRjaGAuXG4gICAgICBpZiAoaGFuZGxlICYmIGhhbmRsZS5wZWVrKSBoYW5kbGUgPSBoYW5kbGUucGVla1xuICAgICAgYWZ0ZXIgPSBoYW5kbGVcbiAgICAgICAgPyBoYW5kbGUoY2hpbGRyZW5baW5kZXggKyAxXSwgcGFyZW50LCBzdGF0ZSwge1xuICAgICAgICAgICAgYmVmb3JlOiAnJyxcbiAgICAgICAgICAgIGFmdGVyOiAnJyxcbiAgICAgICAgICAgIC4uLnRyYWNrZXIuY3VycmVudCgpXG4gICAgICAgICAgfSkuY2hhckF0KDApXG4gICAgICAgIDogJydcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXIgPSBpbmZvLmFmdGVyXG4gICAgfVxuXG4gICAgLy8gSW4gc29tZSBjYXNlcywgaHRtbCAodGV4dCkgY2FuIGJlIGZvdW5kIGluIHBocmFzaW5nIHJpZ2h0IGFmdGVyIGFuIGVvbC5cbiAgICAvLyBXaGVuIHdl4oCZZCBzZXJpYWxpemUgdGhhdCwgaW4gbW9zdCBjYXNlcyB0aGF0IHdvdWxkIGJlIHNlZW4gYXMgaHRtbFxuICAgIC8vIChmbG93KS5cbiAgICAvLyBBcyB3ZSBjYW7igJl0IGVzY2FwZSBvciBzbyB0byBwcmV2ZW50IGl0IGZyb20gaGFwcGVuaW5nLCB3ZSB0YWtlIGEgc29tZXdoYXRcbiAgICAvLyByZWFzb25hYmxlIGFwcHJvYWNoOiByZXBsYWNlIHRoYXQgZW9sIHdpdGggYSBzcGFjZS5cbiAgICAvLyBTZWU6IDxodHRwczovL2dpdGh1Yi5jb20vc3ludGF4LXRyZWUvbWRhc3QtdXRpbC10by1tYXJrZG93bi9pc3N1ZXMvMTU+XG4gICAgaWYgKFxuICAgICAgcmVzdWx0cy5sZW5ndGggPiAwICYmXG4gICAgICAoYmVmb3JlID09PSAnXFxyJyB8fCBiZWZvcmUgPT09ICdcXG4nKSAmJlxuICAgICAgY2hpbGQudHlwZSA9PT0gJ2h0bWwnXG4gICAgKSB7XG4gICAgICByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV0gPSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV0ucmVwbGFjZShcbiAgICAgICAgLyhcXHI/XFxufFxccikkLyxcbiAgICAgICAgJyAnXG4gICAgICApXG4gICAgICBiZWZvcmUgPSAnICdcblxuICAgICAgLy8gVG8gZG86IGRvZXMgdGhpcyB3b3JrIHRvIHJlc2V0IHRyYWNrZXI/XG4gICAgICB0cmFja2VyID0gc3RhdGUuY3JlYXRlVHJhY2tlcihpbmZvKVxuICAgICAgdHJhY2tlci5tb3ZlKHJlc3VsdHMuam9pbignJykpXG4gICAgfVxuXG4gICAgcmVzdWx0cy5wdXNoKFxuICAgICAgdHJhY2tlci5tb3ZlKFxuICAgICAgICBzdGF0ZS5oYW5kbGUoY2hpbGQsIHBhcmVudCwgc3RhdGUsIHtcbiAgICAgICAgICAuLi50cmFja2VyLmN1cnJlbnQoKSxcbiAgICAgICAgICBiZWZvcmUsXG4gICAgICAgICAgYWZ0ZXJcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApXG5cbiAgICBiZWZvcmUgPSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV0uc2xpY2UoLTEpXG4gIH1cblxuICBpbmRleFN0YWNrLnBvcCgpXG5cbiAgcmV0dXJuIHJlc3VsdHMuam9pbignJylcbn1cbiJdLCJuYW1lcyI6WyJjb250YWluZXJQaHJhc2luZyIsInBhcmVudCIsInN0YXRlIiwiaW5mbyIsImluZGV4U3RhY2siLCJjaGlsZHJlbiIsInJlc3VsdHMiLCJpbmRleCIsImJlZm9yZSIsInB1c2giLCJ0cmFja2VyIiwiY3JlYXRlVHJhY2tlciIsImxlbmd0aCIsImNoaWxkIiwiYWZ0ZXIiLCJoYW5kbGUiLCJoYW5kbGVycyIsInR5cGUiLCJwZWVrIiwiY3VycmVudCIsImNoYXJBdCIsInJlcGxhY2UiLCJtb3ZlIiwiam9pbiIsInNsaWNlIiwicG9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   indentLines: () => (/* binding */ indentLines)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */ const eol = /\\r?\\n|\\r/g;\n/**\n * @type {IndentLines}\n */ function indentLines(value, map) {\n    /** @type {Array<string>} */ const result = [];\n    let start = 0;\n    let line = 0;\n    /** @type {RegExpExecArray | null} */ let match;\n    while(match = eol.exec(value)){\n        one(value.slice(start, match.index));\n        result.push(match[0]);\n        start = match.index + match[0].length;\n        line++;\n    }\n    one(value.slice(start));\n    return result.join(\"\");\n    /**\n   * @param {string} value\n   */ function one(value) {\n        result.push(map(value, line, !value));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9pbmRlbnQtbGluZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBRUQsTUFBTUEsTUFBTTtBQUVaOztDQUVDLEdBQ00sU0FBU0MsWUFBWUMsS0FBSyxFQUFFQyxHQUFHO0lBQ3BDLDBCQUEwQixHQUMxQixNQUFNQyxTQUFTLEVBQUU7SUFDakIsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxtQ0FBbUMsR0FDbkMsSUFBSUM7SUFFSixNQUFRQSxRQUFRUCxJQUFJUSxJQUFJLENBQUNOLE9BQVM7UUFDaENPLElBQUlQLE1BQU1RLEtBQUssQ0FBQ0wsT0FBT0UsTUFBTUksS0FBSztRQUNsQ1AsT0FBT1EsSUFBSSxDQUFDTCxLQUFLLENBQUMsRUFBRTtRQUNwQkYsUUFBUUUsTUFBTUksS0FBSyxHQUFHSixLQUFLLENBQUMsRUFBRSxDQUFDTSxNQUFNO1FBQ3JDUDtJQUNGO0lBRUFHLElBQUlQLE1BQU1RLEtBQUssQ0FBQ0w7SUFFaEIsT0FBT0QsT0FBT1UsSUFBSSxDQUFDO0lBRW5COztHQUVDLEdBQ0QsU0FBU0wsSUFBSVAsS0FBSztRQUNoQkUsT0FBT1EsSUFBSSxDQUFDVCxJQUFJRCxPQUFPSSxNQUFNLENBQUNKO0lBQ2hDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0cGxhdGUvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9pbmRlbnQtbGluZXMuanM/Nzk3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuSW5kZW50TGluZXN9IEluZGVudExpbmVzXG4gKi9cblxuY29uc3QgZW9sID0gL1xccj9cXG58XFxyL2dcblxuLyoqXG4gKiBAdHlwZSB7SW5kZW50TGluZXN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRlbnRMaW5lcyh2YWx1ZSwgbWFwKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgbGV0IHN0YXJ0ID0gMFxuICBsZXQgbGluZSA9IDBcbiAgLyoqIEB0eXBlIHtSZWdFeHBFeGVjQXJyYXkgfCBudWxsfSAqL1xuICBsZXQgbWF0Y2hcblxuICB3aGlsZSAoKG1hdGNoID0gZW9sLmV4ZWModmFsdWUpKSkge1xuICAgIG9uZSh2YWx1ZS5zbGljZShzdGFydCwgbWF0Y2guaW5kZXgpKVxuICAgIHJlc3VsdC5wdXNoKG1hdGNoWzBdKVxuICAgIHN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcbiAgICBsaW5lKytcbiAgfVxuXG4gIG9uZSh2YWx1ZS5zbGljZShzdGFydCkpXG5cbiAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIGZ1bmN0aW9uIG9uZSh2YWx1ZSkge1xuICAgIHJlc3VsdC5wdXNoKG1hcCh2YWx1ZSwgbGluZSwgIXZhbHVlKSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbImVvbCIsImluZGVudExpbmVzIiwidmFsdWUiLCJtYXAiLCJyZXN1bHQiLCJzdGFydCIsImxpbmUiLCJtYXRjaCIsImV4ZWMiLCJvbmUiLCJzbGljZSIsImluZGV4IiwicHVzaCIsImxlbmd0aCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patternCompile: () => (/* binding */ patternCompile)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */ /**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */ function patternCompile(pattern) {\n    if (!pattern._compiled) {\n        const before = (pattern.atBreak ? \"[\\\\r\\\\n][\\\\t ]*\" : \"\") + (pattern.before ? \"(?:\" + pattern.before + \")\" : \"\");\n        pattern._compiled = new RegExp((before ? \"(\" + before + \")\" : \"\") + (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? \"\\\\\" : \"\") + pattern.character + (pattern.after ? \"(?:\" + pattern.after + \")\" : \"\"), \"g\");\n    }\n    return pattern._compiled;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9wYXR0ZXJuLWNvbXBpbGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBRUQ7OztDQUdDLEdBQ00sU0FBU0EsZUFBZUMsT0FBTztJQUNwQyxJQUFJLENBQUNBLFFBQVFDLFNBQVMsRUFBRTtRQUN0QixNQUFNQyxTQUNKLENBQUNGLFFBQVFHLE9BQU8sR0FBRyxvQkFBb0IsRUFBQyxJQUN2Q0gsQ0FBQUEsUUFBUUUsTUFBTSxHQUFHLFFBQVFGLFFBQVFFLE1BQU0sR0FBRyxNQUFNLEVBQUM7UUFFcERGLFFBQVFDLFNBQVMsR0FBRyxJQUFJRyxPQUN0QixDQUFDRixTQUFTLE1BQU1BLFNBQVMsTUFBTSxFQUFDLElBQzdCLHVCQUFzQkcsSUFBSSxDQUFDTCxRQUFRTSxTQUFTLElBQUksT0FBTyxFQUFDLElBQ3pETixRQUFRTSxTQUFTLEdBQ2hCTixDQUFBQSxRQUFRTyxLQUFLLEdBQUcsUUFBUVAsUUFBUU8sS0FBSyxHQUFHLE1BQU0sRUFBQyxHQUNsRDtJQUVKO0lBRUEsT0FBT1AsUUFBUUMsU0FBUztBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRwbGF0ZS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL3BhdHRlcm4tY29tcGlsZS5qcz82MjkwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5VbnNhZmV9IFVuc2FmZVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtVbnNhZmV9IHBhdHRlcm5cbiAqIEByZXR1cm5zIHtSZWdFeHB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXR0ZXJuQ29tcGlsZShwYXR0ZXJuKSB7XG4gIGlmICghcGF0dGVybi5fY29tcGlsZWQpIHtcbiAgICBjb25zdCBiZWZvcmUgPVxuICAgICAgKHBhdHRlcm4uYXRCcmVhayA/ICdbXFxcXHJcXFxcbl1bXFxcXHQgXSonIDogJycpICtcbiAgICAgIChwYXR0ZXJuLmJlZm9yZSA/ICcoPzonICsgcGF0dGVybi5iZWZvcmUgKyAnKScgOiAnJylcblxuICAgIHBhdHRlcm4uX2NvbXBpbGVkID0gbmV3IFJlZ0V4cChcbiAgICAgIChiZWZvcmUgPyAnKCcgKyBiZWZvcmUgKyAnKScgOiAnJykgK1xuICAgICAgICAoL1t8XFxcXHt9KClbXFxdXiQrKj8uLV0vLnRlc3QocGF0dGVybi5jaGFyYWN0ZXIpID8gJ1xcXFwnIDogJycpICtcbiAgICAgICAgcGF0dGVybi5jaGFyYWN0ZXIgK1xuICAgICAgICAocGF0dGVybi5hZnRlciA/ICcoPzonICsgcGF0dGVybi5hZnRlciArICcpJyA6ICcnKSxcbiAgICAgICdnJ1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXR0ZXJuLl9jb21waWxlZFxufVxuIl0sIm5hbWVzIjpbInBhdHRlcm5Db21waWxlIiwicGF0dGVybiIsIl9jb21waWxlZCIsImJlZm9yZSIsImF0QnJlYWsiLCJSZWdFeHAiLCJ0ZXN0IiwiY2hhcmFjdGVyIiwiYWZ0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patternInScope: () => (/* binding */ patternInScope)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */ /**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */ function patternInScope(stack, pattern) {\n    return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);\n}\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */ function listInScope(stack, list, none) {\n    if (typeof list === \"string\") {\n        list = [\n            list\n        ];\n    }\n    if (!list || list.length === 0) {\n        return none;\n    }\n    let index = -1;\n    while(++index < list.length){\n        if (stack.includes(list[index])) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9wYXR0ZXJuLWluLXNjb3BlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FFRDs7OztDQUlDLEdBQ00sU0FBU0EsZUFBZUMsS0FBSyxFQUFFQyxPQUFPO0lBQzNDLE9BQ0VDLFlBQVlGLE9BQU9DLFFBQVFFLFdBQVcsRUFBRSxTQUN4QyxDQUFDRCxZQUFZRixPQUFPQyxRQUFRRyxjQUFjLEVBQUU7QUFFaEQ7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNGLFlBQVlGLEtBQUssRUFBRUssSUFBSSxFQUFFQyxJQUFJO0lBQ3BDLElBQUksT0FBT0QsU0FBUyxVQUFVO1FBQzVCQSxPQUFPO1lBQUNBO1NBQUs7SUFDZjtJQUVBLElBQUksQ0FBQ0EsUUFBUUEsS0FBS0UsTUFBTSxLQUFLLEdBQUc7UUFDOUIsT0FBT0Q7SUFDVDtJQUVBLElBQUlFLFFBQVEsQ0FBQztJQUViLE1BQU8sRUFBRUEsUUFBUUgsS0FBS0UsTUFBTSxDQUFFO1FBQzVCLElBQUlQLE1BQU1TLFFBQVEsQ0FBQ0osSUFBSSxDQUFDRyxNQUFNLEdBQUc7WUFDL0IsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0cGxhdGUvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9wYXR0ZXJuLWluLXNjb3BlLmpzP2NkMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlVuc2FmZX0gVW5zYWZlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkNvbnN0cnVjdE5hbWV9IENvbnN0cnVjdE5hbWVcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8Q29uc3RydWN0TmFtZT59IHN0YWNrXG4gKiBAcGFyYW0ge1Vuc2FmZX0gcGF0dGVyblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXR0ZXJuSW5TY29wZShzdGFjaywgcGF0dGVybikge1xuICByZXR1cm4gKFxuICAgIGxpc3RJblNjb3BlKHN0YWNrLCBwYXR0ZXJuLmluQ29uc3RydWN0LCB0cnVlKSAmJlxuICAgICFsaXN0SW5TY29wZShzdGFjaywgcGF0dGVybi5ub3RJbkNvbnN0cnVjdCwgZmFsc2UpXG4gIClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PENvbnN0cnVjdE5hbWU+fSBzdGFja1xuICogQHBhcmFtIHtVbnNhZmVbJ2luQ29uc3RydWN0J119IGxpc3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbm9uZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGxpc3RJblNjb3BlKHN0YWNrLCBsaXN0LCBub25lKSB7XG4gIGlmICh0eXBlb2YgbGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICBsaXN0ID0gW2xpc3RdXG4gIH1cblxuICBpZiAoIWxpc3QgfHwgbGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbm9uZVxuICB9XG5cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgaWYgKHN0YWNrLmluY2x1ZGVzKGxpc3RbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cbiJdLCJuYW1lcyI6WyJwYXR0ZXJuSW5TY29wZSIsInN0YWNrIiwicGF0dGVybiIsImxpc3RJblNjb3BlIiwiaW5Db25zdHJ1Y3QiLCJub3RJbkNvbnN0cnVjdCIsImxpc3QiLCJub25lIiwibGVuZ3RoIiwiaW5kZXgiLCJpbmNsdWRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/safe.js":
/*!**************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/safe.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safe: () => (/* binding */ safe)\n/* harmony export */ });\n/* harmony import */ var _pattern_compile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pattern-compile.js */ \"(rsc)/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js\");\n/* harmony import */ var _pattern_in_scope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pattern-in-scope.js */ \"(rsc)/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js\");\n/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */ \n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */ function safe(state, input, config) {\n    const value = (config.before || \"\") + (input || \"\") + (config.after || \"\");\n    /** @type {Array<number>} */ const positions = [];\n    /** @type {Array<string>} */ const result = [];\n    /** @type {Record<number, {before: boolean, after: boolean}>} */ const infos = {};\n    let index = -1;\n    while(++index < state.unsafe.length){\n        const pattern = state.unsafe[index];\n        if (!(0,_pattern_in_scope_js__WEBPACK_IMPORTED_MODULE_0__.patternInScope)(state.stack, pattern)) {\n            continue;\n        }\n        const expression = (0,_pattern_compile_js__WEBPACK_IMPORTED_MODULE_1__.patternCompile)(pattern);\n        /** @type {RegExpExecArray | null} */ let match;\n        while(match = expression.exec(value)){\n            const before = \"before\" in pattern || Boolean(pattern.atBreak);\n            const after = \"after\" in pattern;\n            const position = match.index + (before ? match[1].length : 0);\n            if (positions.includes(position)) {\n                if (infos[position].before && !before) {\n                    infos[position].before = false;\n                }\n                if (infos[position].after && !after) {\n                    infos[position].after = false;\n                }\n            } else {\n                positions.push(position);\n                infos[position] = {\n                    before,\n                    after\n                };\n            }\n        }\n    }\n    positions.sort(numerical);\n    let start = config.before ? config.before.length : 0;\n    const end = value.length - (config.after ? config.after.length : 0);\n    index = -1;\n    while(++index < positions.length){\n        const position = positions[index];\n        // Character before or after matched:\n        if (position < start || position >= end) {\n            continue;\n        }\n        // If this character is supposed to be escaped because it has a condition on\n        // the next character, and the next character is definitly being escaped,\n        // then skip this escape.\n        if (position + 1 < end && positions[index + 1] === position + 1 && infos[position].after && !infos[position + 1].before && !infos[position + 1].after || positions[index - 1] === position - 1 && infos[position].before && !infos[position - 1].before && !infos[position - 1].after) {\n            continue;\n        }\n        if (start !== position) {\n            // If we have to use a character reference, an ampersand would be more\n            // correct, but as backslashes only care about punctuation, either will\n            // do the trick\n            result.push(escapeBackslashes(value.slice(start, position), \"\\\\\"));\n        }\n        start = position;\n        if (/[!-/:-@[-`{-~]/.test(value.charAt(position)) && (!config.encode || !config.encode.includes(value.charAt(position)))) {\n            // Character escape.\n            result.push(\"\\\\\");\n        } else {\n            // Character reference.\n            result.push(\"&#x\" + value.charCodeAt(position).toString(16).toUpperCase() + \";\");\n            start++;\n        }\n    }\n    result.push(escapeBackslashes(value.slice(start, end), config.after));\n    return result.join(\"\");\n}\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */ function numerical(a, b) {\n    return a - b;\n}\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */ function escapeBackslashes(value, after) {\n    const expression = /\\\\(?=[!-/:-@[-`{-~])/g;\n    /** @type {Array<number>} */ const positions = [];\n    /** @type {Array<string>} */ const results = [];\n    const whole = value + after;\n    let index = -1;\n    let start = 0;\n    /** @type {RegExpExecArray | null} */ let match;\n    while(match = expression.exec(whole)){\n        positions.push(match.index);\n    }\n    while(++index < positions.length){\n        if (start !== positions[index]) {\n            results.push(value.slice(start, positions[index]));\n        }\n        results.push(\"\\\\\");\n        start = positions[index];\n    }\n    results.push(value.slice(start));\n    return results.join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/safe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mdast-util-to-markdown/lib/util/track.js":
/*!***************************************************************!*\
  !*** ./node_modules/mdast-util-to-markdown/lib/util/track.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   track: () => (/* binding */ track)\n/* harmony export */ });\n/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */ /**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */ function track(config) {\n    // Defaults are used to prevent crashes when older utilities somehow activate\n    // this code.\n    /* c8 ignore next 5 */ const options = config || {};\n    const now = options.now || {};\n    let lineShift = options.lineShift || 0;\n    let line = now.line || 1;\n    let column = now.column || 1;\n    return {\n        move,\n        current,\n        shift\n    };\n    /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */ function current() {\n        return {\n            now: {\n                line,\n                column\n            },\n            lineShift\n        };\n    }\n    /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */ function shift(value) {\n        lineShift += value;\n    }\n    /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */ function move(input) {\n        // eslint-disable-next-line unicorn/prefer-default-parameters\n        const value = input || \"\";\n        const chunks = value.split(/\\r?\\n|\\r/g);\n        const tail = chunks[chunks.length - 1];\n        line += chunks.length - 1;\n        column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;\n        return value;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC90cmFjay5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0MsR0FFRDs7OztDQUlDLEdBQ00sU0FBU0EsTUFBTUMsTUFBTTtJQUMxQiw2RUFBNkU7SUFDN0UsYUFBYTtJQUNiLG9CQUFvQixHQUNwQixNQUFNQyxVQUFVRCxVQUFVLENBQUM7SUFDM0IsTUFBTUUsTUFBTUQsUUFBUUMsR0FBRyxJQUFJLENBQUM7SUFDNUIsSUFBSUMsWUFBWUYsUUFBUUUsU0FBUyxJQUFJO0lBQ3JDLElBQUlDLE9BQU9GLElBQUlFLElBQUksSUFBSTtJQUN2QixJQUFJQyxTQUFTSCxJQUFJRyxNQUFNLElBQUk7SUFFM0IsT0FBTztRQUFDQztRQUFNQztRQUFTQztJQUFLO0lBRTVCOzs7O0dBSUMsR0FDRCxTQUFTRDtRQUNQLE9BQU87WUFBQ0wsS0FBSztnQkFBQ0U7Z0JBQU1DO1lBQU07WUFBR0Y7UUFBUztJQUN4QztJQUVBOzs7O0dBSUMsR0FDRCxTQUFTSyxNQUFNQyxLQUFLO1FBQ2xCTixhQUFhTTtJQUNmO0lBRUE7Ozs7R0FJQyxHQUNELFNBQVNILEtBQUtJLEtBQUs7UUFDakIsNkRBQTZEO1FBQzdELE1BQU1ELFFBQVFDLFNBQVM7UUFDdkIsTUFBTUMsU0FBU0YsTUFBTUcsS0FBSyxDQUFDO1FBQzNCLE1BQU1DLE9BQU9GLE1BQU0sQ0FBQ0EsT0FBT0csTUFBTSxHQUFHLEVBQUU7UUFDdENWLFFBQVFPLE9BQU9HLE1BQU0sR0FBRztRQUN4QlQsU0FDRU0sT0FBT0csTUFBTSxLQUFLLElBQUlULFNBQVNRLEtBQUtDLE1BQU0sR0FBRyxJQUFJRCxLQUFLQyxNQUFNLEdBQUdYO1FBQ2pFLE9BQU9NO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRwbGF0ZS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL3RyYWNrLmpzP2NhOWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkNyZWF0ZVRyYWNrZXJ9IENyZWF0ZVRyYWNrZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuVHJhY2tDdXJyZW50fSBUcmFja0N1cnJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuVHJhY2tNb3ZlfSBUcmFja01vdmVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuVHJhY2tTaGlmdH0gVHJhY2tTaGlmdFxuICovXG5cbi8qKlxuICogVHJhY2sgcG9zaXRpb25hbCBpbmZvIGluIHRoZSBvdXRwdXQuXG4gKlxuICogQHR5cGUge0NyZWF0ZVRyYWNrZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFjayhjb25maWcpIHtcbiAgLy8gRGVmYXVsdHMgYXJlIHVzZWQgdG8gcHJldmVudCBjcmFzaGVzIHdoZW4gb2xkZXIgdXRpbGl0aWVzIHNvbWVob3cgYWN0aXZhdGVcbiAgLy8gdGhpcyBjb2RlLlxuICAvKiBjOCBpZ25vcmUgbmV4dCA1ICovXG4gIGNvbnN0IG9wdGlvbnMgPSBjb25maWcgfHwge31cbiAgY29uc3Qgbm93ID0gb3B0aW9ucy5ub3cgfHwge31cbiAgbGV0IGxpbmVTaGlmdCA9IG9wdGlvbnMubGluZVNoaWZ0IHx8IDBcbiAgbGV0IGxpbmUgPSBub3cubGluZSB8fCAxXG4gIGxldCBjb2x1bW4gPSBub3cuY29sdW1uIHx8IDFcblxuICByZXR1cm4ge21vdmUsIGN1cnJlbnQsIHNoaWZ0fVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgdHJhY2tlZCBpbmZvLlxuICAgKlxuICAgKiBAdHlwZSB7VHJhY2tDdXJyZW50fVxuICAgKi9cbiAgZnVuY3Rpb24gY3VycmVudCgpIHtcbiAgICByZXR1cm4ge25vdzoge2xpbmUsIGNvbHVtbn0sIGxpbmVTaGlmdH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgYW4gaW5jcmVhc2VkIGxpbmUgc2hpZnQgKHRoZSB0eXBpY2FsIGluZGVudCBmb3IgbGluZXMpLlxuICAgKlxuICAgKiBAdHlwZSB7VHJhY2tTaGlmdH1cbiAgICovXG4gIGZ1bmN0aW9uIHNoaWZ0KHZhbHVlKSB7XG4gICAgbGluZVNoaWZ0ICs9IHZhbHVlXG4gIH1cblxuICAvKipcbiAgICogTW92ZSBwYXN0IHNvbWUgZ2VuZXJhdGVkIG1hcmtkb3duLlxuICAgKlxuICAgKiBAdHlwZSB7VHJhY2tNb3ZlfVxuICAgKi9cbiAgZnVuY3Rpb24gbW92ZShpbnB1dCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZWZlci1kZWZhdWx0LXBhcmFtZXRlcnNcbiAgICBjb25zdCB2YWx1ZSA9IGlucHV0IHx8ICcnXG4gICAgY29uc3QgY2h1bmtzID0gdmFsdWUuc3BsaXQoL1xccj9cXG58XFxyL2cpXG4gICAgY29uc3QgdGFpbCA9IGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMV1cbiAgICBsaW5lICs9IGNodW5rcy5sZW5ndGggLSAxXG4gICAgY29sdW1uID1cbiAgICAgIGNodW5rcy5sZW5ndGggPT09IDEgPyBjb2x1bW4gKyB0YWlsLmxlbmd0aCA6IDEgKyB0YWlsLmxlbmd0aCArIGxpbmVTaGlmdFxuICAgIHJldHVybiB2YWx1ZVxuICB9XG59XG4iXSwibmFtZXMiOlsidHJhY2siLCJjb25maWciLCJvcHRpb25zIiwibm93IiwibGluZVNoaWZ0IiwibGluZSIsImNvbHVtbiIsIm1vdmUiLCJjdXJyZW50Iiwic2hpZnQiLCJ2YWx1ZSIsImlucHV0IiwiY2h1bmtzIiwic3BsaXQiLCJ0YWlsIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mdast-util-to-markdown/lib/util/track.js\n");

/***/ })

};
;